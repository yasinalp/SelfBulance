// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDNN_H
#define XDNN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdnn_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XDnn_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XDnn;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDnn_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDnn_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDnn_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDnn_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDnn_Initialize(XDnn *InstancePtr, u16 DeviceId);
XDnn_Config* XDnn_LookupConfig(u16 DeviceId);
int XDnn_CfgInitialize(XDnn *InstancePtr, XDnn_Config *ConfigPtr);
#else
int XDnn_Initialize(XDnn *InstancePtr, const char* InstanceName);
int XDnn_Release(XDnn *InstancePtr);
#endif

void XDnn_Start(XDnn *InstancePtr);
u32 XDnn_IsDone(XDnn *InstancePtr);
u32 XDnn_IsIdle(XDnn *InstancePtr);
u32 XDnn_IsReady(XDnn *InstancePtr);
void XDnn_EnableAutoRestart(XDnn *InstancePtr);
void XDnn_DisableAutoRestart(XDnn *InstancePtr);


void XDnn_InterruptGlobalEnable(XDnn *InstancePtr);
void XDnn_InterruptGlobalDisable(XDnn *InstancePtr);
void XDnn_InterruptEnable(XDnn *InstancePtr, u32 Mask);
void XDnn_InterruptDisable(XDnn *InstancePtr, u32 Mask);
void XDnn_InterruptClear(XDnn *InstancePtr, u32 Mask);
u32 XDnn_InterruptGetEnabled(XDnn *InstancePtr);
u32 XDnn_InterruptGetStatus(XDnn *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
